# ------------------------------------------------------------------------------
# misc
# ------------------------------------------------------------------------------
alias weather='curl wttr.in/Santa_Cruz'
alias hg='history 1 | grep'
fe () { find . -name $1 -exec vim {} + ; }
rm-known-host () { sed -i .bak "$1d" ~/.ssh/known_hosts }
alias ll="ls -hlFG"
alias curl="curl -s"
alias gw="./gradlew"
alias tf="terraform"
alias week='date +"%Y: week %V"'

# ------------------------------------------------------------------------------
# vi...
# ------------------------------------------------------------------------------
alias vim="vim"
alias e="vim"
alias :e="vim"

# ------------------------------------------------------------------------------
# mac stuff
# ------------------------------------------------------------------------------
alias f='open -a Finder ./' # open current directory in finder
trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview

# ------------------------------------------------------------------------------
# git
# ------------------------------------------------------------------------------
alias git-prune-merged='comm -12 <(git branch | sed "s/ *//g") <(git remote prune origin | sed "s/^.*origin\///g") | xargs -L1 -J % git branch -D %'
function parse_git_branch () {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

alias git-branch-desc='git branch | while read line; do 
    description=$(git config branch.$(echo "$line" | sed "s/\* //g").description)
    echo "$line"
    if [ "$description" ]
    then
        echo "        $description"
    fi
done'
alias gitroot='cd $(git rev-parse --show-toplevel)'
alias git-reset='git m && git pull && git-prune-merged'

# ------------------------------------------------------------------------------
# containers
# ------------------------------------------------------------------------------
function dsh() { docker exec -e COLUMNS="`tput cols`" -e LINES="`tput lines`" -it $(docker ps | grep --color=never $1 | cut -d" " -f1) /bin/bash; }
function dstart() { docker container start $(docker ps -a | grep --color=never $1 | cut -d " " -f1); }
function dstop() { docker container stop $(docker ps -a | grep --color=never $1 | cut -d " " -f1); }
function dlog() { docker logs -f --since 1m $(docker ps -a | grep --color=never $1 | cut -d " " -f1); }
function klog() {
    pod=$(kubectl get pods | grep --color=never $1 | cut -d " " -f1)
    echo "$pod logs..."
    kubectl logs -f $pod;
}

# ------------------------------------------------------------------------------
# ruby
# ------------------------------------------------------------------------------
alias be='bundle exec'
alias br='be rake'
alias c='br c'
alias cop='be rubocop'


# ------------------------------------------------------------------------------
# python scripts
# ------------------------------------------------------------------------------
function timet() {
    # DIR="/Users/cgerstle/src/personal/py-scripts"
    # $DIR/venv/bin/python $DIR/timet.py "$@"

    if [ "$1" ]
    then
        timestamp_seconds=${1:0:10}
        zmodload zsh/datetime
        TZ=UTC strftime '%Y-%m-%d %H:%M:%S %z' $timestamp_seconds
        strftime '%Y-%m-%d %H:%M:%S %z' $timestamp_seconds
    else
        date '+%s'
    fi
}

function emoji() {
    EMOJI=$(shuf -n 1 ~/emojis.txt) 
    echo $EMOJI | tr -d '\n' | tr -d '\r' | pbcopy
    echo $EMOJI
}

# ------------------------------------------------------------------------------
# pulsara
# ------------------------------------------------------------------------------
ecr-tags() {
	aws ecr describe-images --repository-name $1 --query 'sort_by(imageDetails,& imagePushedAt)[*]' | jq '.[-5:] | .[] | .imageDigest, .imageTags'
}

# ------------------------------------------------------------------------------
# k8s
# ------------------------------------------------------------------------------
alias k=kubectl

# ------------------------------------------------------------------------------
# `config` for bare repo dotfile management
# ------------------------------------------------------------------------------
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'

# ------------------------------------------------------------------------------
# ronin
# ------------------------------------------------------------------------------
init-argo() {
    export ARGO_SERVER='argo-wf.devops.projectronin.io:443' 
    export ARGO_HTTP1=true  
    export ARGO_SECURE=true
    export ARGO_BASE_HREF=
    export ARGO_TOKEN='Bearer v2:eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIiwiemlwIjoiREVGIn0.hcP5l2SQsOQ0s8p2JP9TEXrmSwBhqmqsSzmSOJeevKg2enuGxtZFURT4LJB0e28MoZbttsEVXCWFQ4ziX5gbHUU_gTOCWj0BiA0Dlp0OKjHCwUtl4yWNNz9nipAHcwYp2lh0XZQAjXv_b9ZztxBVhlBlwKIU5K-Jr0G_SrBZDG_Q93Yw2jJAfhxf5Jd5OyrPgQ8rS0eQ53gdKb4bEszskhvCVzeJCLOkQ23Bl0F3Iit78sy873vLM4e70yTrK3X3Y1VQZfcVSfUYIwkRwgZmZAttVgzQI_TPvSrGbRF3_orrfLx5L6B4YFxhhPGgOSZkz3hK78cBC4MvZ0NE9Gl3cg.st3PuozNTe5qMlvd.8XGNQQSE9-y6NW6e19Nj6i_ecKZH6oLOpAfXvfcBD9boPtq7BqazNuBjN3CL_Ugd67BcOjhsbBUMhh9ebcMAOuzBn2pvjQhFGpR9tXN_-bh0Alg.6s_P2hcYieGGgXiR_mX0nA' 
    export ARGO_NAMESPACE=argo-wf
    export KUBECONFIG=/dev/null
}

vault-login() {
    export VAULT_ADDR=https://vault.devops.projectronin.io
    vault login -address=${VAULT_ADDR} -method=okta username=caseyg
}

sdm-find() {
    terms=("$@")
    args=""
    for t in "${terms[@]}"; do
        args="${args} | grep -w --color=never ${t}"
    done
    cmd="sdm status ${args}"

    eval "${cmd}"
}

sdm-mysql() {
    datasource_status=$(sdm-find "$@" | sed -r 's/ {2,}/\t/g')

    results=$(echo "${datasource_status}" | wc -l | xargs)
    if [ "${results}" != "1" ]; then
        echo "More than one datasource found with '$@', please be more specific."
        echo "Matching datasources:"
        while IFS= read -r line; do
            source=$(echo "${line}" | cut -f2)
            echo "  ${source}"
        done <<< "${datasource_status}"
        return
    fi

    datasource=$(echo "${datasource_status}" | cut -f2)
    connected=$(echo "${datasource_status}" | cut -f3)
    address=$(echo "${datasource_status}" | cut -f4)
    type=$(echo "${datasource_status}" | cut -f5)

    echo "${datasource}:"
    echo "  connected: ${connected}"
    echo "  address: ${address}"
    echo "  type: ${type}"

    if [ "${type}" != "mysql" ]; then
        echo "not a mysql type!"
        return
    fi

    if [ "${connected}" = "not connected" ]; then
        printf "connecting... "
        sdm connect ${datasource}
        if [ "$?" != "0" ]; then
            echo "connection failed!"
            return
        fi
    fi

    host=$(echo "${address}" | cut -d ":" -f1)
    port=$(echo "${address}" | cut -d ":" -f2)
    mysql -h "${host}" -P "${port}" -u ronin -p
    sdm disconnect "${datasource}"
}

sdm-close() {
    sources=$(sdm status)
    while IFS= read -r line; do
        data=$(echo "${line}" | sed -r 's/ {2,}/\t/g')
        source=$(echo "${data}" | cut -f2)
        connected=$(echo "${data}" | cut -f3)
        
        if [ "${connected}" = 'connected' ]; then
            printf "%s: %s --> " "${source}" "${connected}"
            sdm disconnect "${source}"
        fi
    done <<< "$sources"
    echo "done."
}
